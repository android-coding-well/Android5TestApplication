<?xml version="1.0" encoding="utf-8"?>
<!-- CoordinatorLayout 增强型的FrameLayout
1-让浮动操作按钮上下滑动，为Snackbar留出空间
2-扩展或者缩小Toolbar或者头部，让主内容区域有更多的空间
3-控制哪个view应该扩展还是收缩，以及其显示大小比例，包括视差滚动效果动画-->
<android.support.design.widget.CoordinatorLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:id="@+id/cl_root"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:fitsSystemWindows="true"
    tools:context="com.gosuncn.test.MainActivity">

    <!--AppBarLayout目前必须是第一个嵌套在CoordinatorLayout里面的子view-->
    <android.support.design.widget.AppBarLayout
        android:layout_width="match_parent"
        android:layout_height="@dimen/app_bar_height"
        android:theme="@style/AppTheme.AppBarOverlay">
        <!--使用CollapsingToolbarLayout，发现Toolbar的app:title无效，所以要在代码中设置使用CollapsingToolbarLayout.setTitle("Title");-->
        <android.support.design.widget.CollapsingToolbarLayout
            android:id="@+id/collapsing_toolbar"
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:fitsSystemWindows="true"
            app:contentScrim="?attr/colorPrimary"
            app:expandedTitleMarginEnd="64dp"
            app:expandedTitleMarginStart="48dp"
            app:layout_scrollFlags="scroll|exitUntilCollapsed">

        <!-- app:theme：指定Toolbar的样式，包括ActionbarToggle和popupMenu的指示图标颜色
            app:popupTheme：指定popupMenu溢出后的样式-->
        <!--0-scroll: 所有想滚动出屏幕的view都需要设置这个flag- 没有设置这个flag的view将被固定在屏幕顶部。
            1-enterAlways: 这个flag让任意向下的滚动都会导致该view变为可见
            2-enterAlwaysCollapsed: 当你的视图已经设置minHeight属性又使用此标志时，你的视图只能以最小高度进入，只有当滚动视图到达顶部时才扩大到完整高度
            3-exitUntilCollapsed: 当视图会在滚动时，它一直滚动到设置的minHeight时完全隐藏。
            需要注意的是，后面两种模式基本只有在CollapsingToolbarLayout才有用，
            而前面两种模式基本是需要一起使用的，也就是说，这些flag的使用场景，基本已经固定了-->
        <android.support.v7.widget.Toolbar
            android:id="@+id/toolbar"
            android:layout_width="match_parent"
            android:layout_height="?attr/actionBarSize"
            android:background="?attr/colorPrimary"
            app:layout_scrollFlags="scroll|enterAlways"
            app:navigationIcon="@android:drawable/ic_menu_sort_by_size"
            app:popupTheme="@style/AppTheme.PopupOverlay"
            app:subtitle="子标题"
            app:title="标题" />
            <ImageView
                android:id="@+id/iv_img"
                android:src="@mipmap/ic_launcher"
                app:layout_scrollFlags="scroll|enterAlways|enterAlwaysCollapsed"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                app:layout_collapseMode="parallax"
                android:layout_gravity="center"
                />
        </android.support.design.widget.CollapsingToolbarLayout>

    </android.support.design.widget.AppBarLayout>

    <!--1-需要定义AppBarLayout与滚动视图之间的联系。在RecyclerView或者任意支持嵌套滚动的view比如NestedScrollView上添加app:layout_behavior。
    support library包含了一个特殊的字符串资源@string/appbar_scrolling_view_behavior，
    它和AppBarLayout.ScrollingViewBehavior相匹配，用来通知AppBarLayout 这个特殊的view何时发生了滚动事件，
    这个behavior需要设置在触发事件（滚动）的view之上
    2-当CoordinatorLayout发现如RecyclerView中定义了这个属性，它会搜索自己所包含的其他view，看看是否有view与这个behavior相关联。
    AppBarLayout.ScrollingViewBehavior描述了RecyclerView与AppBarLayout之间的依赖关系。RecyclerView的任意滚动事件都将触发AppBarLayout或者AppBarLayout里面view的改变。
    AppBarLayout里面定义的view只要设置了app:layout_scrollFlags属性，就可以在RecyclerView滚动事件发生的时候被触发-->
    <include layout="@layout/content_main" />

    <!--这是一个浮动按钮。由于FloatingActionButton是重写ImageView的，
        所以FloatingActionButton拥有ImageView的一切属性。
        属性介绍：
            app:backgroundTint : FAB的背景色。
            app:elevation      ：FAB的阴影效果。
            app:rippleColor    ：设置涟漪的颜色，默认是由背景色生成的暗色调，可以自己指定。
            app:pressedTranslationZ  ：FAB动画效果，在它被按下的时候阴影就会增大。-->
    <android.support.design.widget.FloatingActionButton
        android:id="@+id/fab"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_gravity="bottom|end"
        android:layout_margin="@dimen/fab_margin"
        app:backgroundTint="@color/colorPrimary"
        app:elevation="6dp"
        app:pressedTranslationZ="12dp"
        app:rippleColor="@color/colorAccent"
        android:src="@android:drawable/ic_dialog_email" />
    
<View
    android:id="@+id/v_white"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="#ffffff"
    android:visibility="gone"/>

</android.support.design.widget.CoordinatorLayout>
